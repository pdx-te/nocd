from flask import Flask, request, abort
import random
import os
import binascii
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from threading import Thread


app = Flask(__name__)

# global var for the GTK window
bind_window = None
bind_number = None
bind_token  = None

# global var

# CONSTANT VALUES
NUM_CHARS_TOKEN = 30

# Sets the NOCd instance
def set_nocd(nocdisplay):
    global nocd
    nocd = nocdisplay

# Creates a window using GTK and displays a random int between 1 and 10k
# This is used to bind the NOC CLI to the NOCd
def create_window(): 
    # Generate random number to show on the screen. The user should send a request
    # with the number to bind the user to the display
    global bind_number
    bind_number = random.randint(1, 10000)
    global bind_window 
    bind_window = Gtk.Window()
    label = Gtk.Label("<span size=\"400000\">" + str(bind_number) + "</span>")
    label.set_use_markup(True)
    bind_window.add(label)
    bind_window.show_all()
    gtk_thread = Thread(target=Gtk.main)
    gtk_thread.setDaemon(True)
    gtk_thread.start()

# Generates a random token with NUM_CHARS_TOKEN characters
def generate_token():
    global NUM_CHARS_TOKEN
    return binascii.hexlify(os.urandom(NUM_CHARS_TOKEN))

# Verifies the provided token
def verify_token(token=None):
    global bind_token
    if token == bind_token:
      return True
    else:
      return False

# Endpoint to request the NOCd to bind to the requesting NOC CLI
@app.route("/bind-noc-display-request")
def bind_noc_display_request():
    create_window()
    global bind_token
    bind_token = generate_token()
    return "Request received. Please provide displayed bind number to receive auth token."

# Endpoint to reply to the NOCd with the provided token and random bind number
@app.route("/bind-noc-display/te-<int:random>")
def bind_noc_display_reply(random):

    # Get the string with the random number provided by the NOC Display user
    # and if it matches the string generated by bind_noc_display_request
    # close the window and start accepting commands
    global bind_window
    global bind_number
    global bind_token

    if random == bind_number:
      bind_window.destroy()
      Gtk.main_quit()
      return bind_token, 200
    
    else:
      abort(401)  

# Endpoint to stop the cycle
@app.route("/stop-cycle")
def stop_cycle():
    
    # Check provided token
    verify_token(request.headers)

# Endpoint to start NOCd
@app.route("/start-nocd")
def start_nocd():

    # Check provided token
    if not verify_token(request.headers):
      abort(401)

    

#if __name__ == "__main__":
#    app.run()
